// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.walfarma.dominio;

import br.com.walfarma.dominio.ProdutoDataOnDemand;
import br.com.walfarma.dominio.ProdutoSubstancia;
import br.com.walfarma.dominio.SubstanciaDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProdutoSubstanciaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProdutoSubstanciaDataOnDemand: @Component;
    
    private Random ProdutoSubstanciaDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<ProdutoSubstancia> ProdutoSubstanciaDataOnDemand.data;
    
    @Autowired
    private ProdutoDataOnDemand ProdutoSubstanciaDataOnDemand.produtoDataOnDemand;
    
    @Autowired
    private SubstanciaDataOnDemand ProdutoSubstanciaDataOnDemand.substanciaDataOnDemand;
    
    public ProdutoSubstancia ProdutoSubstanciaDataOnDemand.getNewTransientProdutoSubstancia(int index) {
        br.com.walfarma.dominio.ProdutoSubstancia obj = new br.com.walfarma.dominio.ProdutoSubstancia();
        obj.setId(new Integer(index).longValue());
        obj.setProduto(produtoDataOnDemand.getRandomProduto());
        obj.setSubstancia(substanciaDataOnDemand.getRandomSubstancia());
        obj.setUltimaAtualizacao(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        return obj;
    }
    
    public ProdutoSubstancia ProdutoSubstanciaDataOnDemand.getSpecificProdutoSubstancia(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        ProdutoSubstancia obj = data.get(index);
        return ProdutoSubstancia.findProdutoSubstancia(obj.get_id());
    }
    
    public ProdutoSubstancia ProdutoSubstanciaDataOnDemand.getRandomProdutoSubstancia() {
        init();
        ProdutoSubstancia obj = data.get(rnd.nextInt(data.size()));
        return ProdutoSubstancia.findProdutoSubstancia(obj.get_id());
    }
    
    public boolean ProdutoSubstanciaDataOnDemand.modifyProdutoSubstancia(ProdutoSubstancia obj) {
        return false;
    }
    
    public void ProdutoSubstanciaDataOnDemand.init() {
        data = br.com.walfarma.dominio.ProdutoSubstancia.findProdutoSubstanciaEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'ProdutoSubstancia' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<br.com.walfarma.dominio.ProdutoSubstancia>();
        for (int i = 0; i < 10; i++) {
            br.com.walfarma.dominio.ProdutoSubstancia obj = getNewTransientProdutoSubstancia(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
