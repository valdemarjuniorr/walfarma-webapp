// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.walfarma.dominio;

import br.com.walfarma.dominio.CaixaDataOnDemand;
import br.com.walfarma.dominio.ClienteDataOnDemand;
import br.com.walfarma.dominio.ContasRecebidas;
import br.com.walfarma.dominio.LojaDataOnDemand;
import br.com.walfarma.dominio.VendedorDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ContasRecebidasDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ContasRecebidasDataOnDemand: @Component;
    
    private Random ContasRecebidasDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<ContasRecebidas> ContasRecebidasDataOnDemand.data;
    
    @Autowired
    private ClienteDataOnDemand ContasRecebidasDataOnDemand.clienteDataOnDemand;
    
    @Autowired
    private VendedorDataOnDemand ContasRecebidasDataOnDemand.vendedorDataOnDemand;
    
    @Autowired
    private CaixaDataOnDemand ContasRecebidasDataOnDemand.caixaDataOnDemand;
    
    @Autowired
    private LojaDataOnDemand ContasRecebidasDataOnDemand.lojaDataOnDemand;
    
    public ContasRecebidas ContasRecebidasDataOnDemand.getNewTransientContasRecebidas(int index) {
        br.com.walfarma.dominio.ContasRecebidas obj = new br.com.walfarma.dominio.ContasRecebidas();
        obj.setId(new Integer(index).longValue());
        obj.setCliente(clienteDataOnDemand.getRandomCliente());
        obj.setConvenio("convenio_" + index);
        obj.setTotalDebito(java.math.BigDecimal.valueOf(index));
        obj.setValorPago(java.math.BigDecimal.valueOf(index));
        obj.setNumeroRecibo(new Integer(index));
        obj.setTipopagamento(br.com.walfarma.dominio.TipoPagamento.class.getEnumConstants()[0]);
        obj.setDataPagamento(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setDataVencimento(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setVendedor(vendedorDataOnDemand.getRandomVendedor());
        obj.setCaixa(caixaDataOnDemand.getRandomCaixa());
        obj.setValorLiquido(java.math.BigDecimal.valueOf(index));
        obj.setDinheiro(java.math.BigDecimal.valueOf(index));
        obj.setChequePre(java.math.BigDecimal.valueOf(index));
        obj.setLoja(lojaDataOnDemand.getRandomLoja());
        obj.setCartao(java.math.BigDecimal.valueOf(index));
        obj.setCheque(java.math.BigDecimal.valueOf(index));
        obj.setValorCorrecao(java.math.BigDecimal.valueOf(index));
        obj.setRemessa(java.math.BigDecimal.valueOf(index));
        return obj;
    }
    
    public ContasRecebidas ContasRecebidasDataOnDemand.getSpecificContasRecebidas(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        ContasRecebidas obj = data.get(index);
        return ContasRecebidas.findContasRecebidas(obj.get_id());
    }
    
    public ContasRecebidas ContasRecebidasDataOnDemand.getRandomContasRecebidas() {
        init();
        ContasRecebidas obj = data.get(rnd.nextInt(data.size()));
        return ContasRecebidas.findContasRecebidas(obj.get_id());
    }
    
    public boolean ContasRecebidasDataOnDemand.modifyContasRecebidas(ContasRecebidas obj) {
        return false;
    }
    
    public void ContasRecebidasDataOnDemand.init() {
        data = br.com.walfarma.dominio.ContasRecebidas.findContasRecebidasEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'ContasRecebidas' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<br.com.walfarma.dominio.ContasRecebidas>();
        for (int i = 0; i < 10; i++) {
            br.com.walfarma.dominio.ContasRecebidas obj = getNewTransientContasRecebidas(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
